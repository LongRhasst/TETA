import { Injectable } from '@nestjs/common';
import {
  SUMMARIZE_REPORT_SYSTEM_PROMPT,
  SUMMARIZE_REPORT_USER_PROMPT,
} from '../prompts';
import { LMStudioService } from '../lmstudio.service';

@Injectable()
export class SummarizeReportService {
  constructor(private readonly lmStudioService: LMStudioService) {}

  /**
   * T·∫°o b√°o c√°o t·ªïng h·ª£p team t·ª´ t·∫•t c·∫£ daily reports
   * Format output d·∫°ng form message thay v√¨ JSON
   */
  async generateTeamSummaryReport(dailyReports: any[]): Promise<string> {
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng structured format
    const inputData = this.prepareReportData(dailyReports);
    
    const systemPrompt = SUMMARIZE_REPORT_SYSTEM_PROMPT;
    const userPrompt = SUMMARIZE_REPORT_USER_PROMPT.replace('{input}', inputData);

    const result = await this.lmStudioService.generateContentWithChunking(systemPrompt, userPrompt);
    return result;
  }

  /**
   * Generate report with training context for better output
   * S·ª≠ d·ª•ng enhanced prompt ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng output
   */
  async generateSummarizeReportWithTraining(input: string): Promise<string> {
    // Enhanced prompt v·ªõi training context
    const enhancedSystemPrompt = `${SUMMARIZE_REPORT_SYSTEM_PROMPT}

=== QUY T·∫ÆC B·ªî SUNG ===
1. Lu√¥n s·ª≠ d·ª•ng ti·∫øng Vi·ªát trong b√°o c√°o
2. Format d·∫°ng form message, KH√îNG bao gi·ªù tr·∫£ v·ªÅ JSON raw
3. Bao g·ªìm emoji ƒë·ªÉ d·ªÖ ƒë·ªçc: üìä üìà üéØ ‚úÖ ‚ö†Ô∏è üë• üöÄ
4. ƒê∆∞a ra metrics c·ª• th·ªÉ v√† ph·∫ßn trƒÉm
5. Ph√¢n t√≠ch insights thay v√¨ ch·ªâ t√≥m t·∫Øt data
6. K·∫øt th√∫c b·∫±ng action items c·ª• th·ªÉ
7. X·ª≠ l√Ω ri√™ng c√°c b√°o c√°o kh√¥ng h·ª£p l·ªá (daily_late = true)`;

    const userPrompt = SUMMARIZE_REPORT_USER_PROMPT.replace('{input}', input);

    const result = await this.lmStudioService.generateContentWithChunking(enhancedSystemPrompt, userPrompt);
    return result;
  }

  /**
   * T·∫°o b√°o c√°o t·ªïng h·ª£p team v·ªõi ƒë√°nh gi√° hi·ªáu su·∫•t
   * ƒê·∫ßu v√†o c√≥ th·ªÉ l√† array reports ho·∫∑c string data
   */
  async generateComprehensiveTeamReport(data: any[] | string): Promise<string> {
    let inputData: string;
    
    if (Array.isArray(data)) {
      inputData = this.prepareReportData(data);
    } else {
      inputData = data;
    }

    return await this.generateSummarizeReportWithTraining(inputData);
  }

  /**
   * Chu·∫©n b·ªã d·ªØ li·ªáu daily reports th√†nh format ph√π h·ª£p cho AI
   * Gi·∫£m k√≠ch th∆∞·ªõc ƒë·ªÉ tr√°nh context overflow
   */
  private prepareReportData(reports: any[]): string {
    // Ch·ªâ l·∫•y t·ªëi ƒëa 8 reports ƒë·ªÉ tr√°nh context overflow
    const limitedReports = reports.slice(0, 8);
    const validReports = limitedReports.filter(r => !r.daily_late);
    const invalidReports = limitedReports.filter(r => r.daily_late);
    
    let dataString = `=== TH·ªêNG K√ä ===\n`;
    dataString += `T·ªïng: ${limitedReports.length}, H·ª£p l·ªá: ${validReports.length}, Kh√¥ng h·ª£p l·ªá: ${invalidReports.length}\n\n`;

    dataString += `=== CHI TI·∫æT (TOP ${validReports.length}) ===\n`;
    validReports.forEach(report => {
      dataString += `${report.display_name || report.member}: `;
      dataString += `${(report.yesterday || '').substring(0, 50)}... | `;
      dataString += `${(report.today || '').substring(0, 50)}... | `;
      dataString += `${report.block || 'OK'}\n`;
    });

    return dataString;
  }
}

import { Injectable } from '@nestjs/common';
import { VertexAIService } from '../vertex-ai.service';
import {
  SUMMARIZE_REPORT_SYSTEM_PROMPT,
  SUMMARIZE_REPORT_USER_PROMPT,
} from '../prompts';
import { trainingExamples } from '../trainning/training-IO';

@Injectable()
export class SummarizeReportService {
  constructor(private readonly vertexAI: VertexAIService) {}

  /**
   * T·∫°o b√°o c√°o t·ªïng h·ª£p team t·ª´ t·∫•t c·∫£ daily reports
   * Format output d·∫°ng form message thay v√¨ JSON
   */
  async generateTeamSummaryReport(dailyReports: any[]): Promise<string> {
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng structured format
    const inputData = this.prepareReportData(dailyReports);
    
    const prompt = `${SUMMARIZE_REPORT_SYSTEM_PROMPT}

User request: ${SUMMARIZE_REPORT_USER_PROMPT}

Data to analyze: ${inputData}`;

    return await this.vertexAI.generateContent(prompt);
  }

  /**
   * Generate report with training context for better output
   * S·ª≠ d·ª•ng training examples ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng output
   */
  async generateSummarizeReportWithTraining(input: string): Promise<string> {
    // Enhanced prompt v·ªõi training context
    const enhancedSystemPrompt = `${SUMMARIZE_REPORT_SYSTEM_PROMPT}

=== V√ç D·ª§ OUTPUT CHU·∫®N ===
${trainingExamples.weeklyReportTraining.expectedOutput.substring(0, 800)}...

=== QUY T·∫ÆC B·ªî SUNG ===
1. Lu√¥n s·ª≠ d·ª•ng ti·∫øng Vi·ªát trong b√°o c√°o
2. Format d·∫°ng form message, KH√îNG bao gi·ªù tr·∫£ v·ªÅ JSON raw
3. Bao g·ªìm emoji ƒë·ªÉ d·ªÖ ƒë·ªçc: üìä üìà üéØ ‚úÖ ‚ö†Ô∏è üë• üöÄ
4. ƒê∆∞a ra metrics c·ª• th·ªÉ v√† ph·∫ßn trƒÉm
5. Ph√¢n t√≠ch insights thay v√¨ ch·ªâ t√≥m t·∫Øt data
6. K·∫øt th√∫c b·∫±ng action items c·ª• th·ªÉ
7. X·ª≠ l√Ω ri√™ng c√°c b√°o c√°o kh√¥ng h·ª£p l·ªá (daily_late = true)

User request: ${SUMMARIZE_REPORT_USER_PROMPT}

Data to analyze: ${input}`;

    return await this.vertexAI.generateContent(enhancedSystemPrompt);
  }

  /**
   * T·∫°o b√°o c√°o t·ªïng h·ª£p team v·ªõi ƒë√°nh gi√° hi·ªáu su·∫•t
   * ƒê·∫ßu v√†o c√≥ th·ªÉ l√† array reports ho·∫∑c string data
   */
  async generateComprehensiveTeamReport(data: any[] | string): Promise<string> {
    let inputData: string;
    
    if (Array.isArray(data)) {
      inputData = this.prepareReportData(data);
    } else {
      inputData = data;
    }

    return await this.generateSummarizeReportWithTraining(inputData);
  }

  /**
   * Chu·∫©n b·ªã d·ªØ li·ªáu daily reports th√†nh format ph√π h·ª£p cho AI
   */
  private prepareReportData(reports: any[]): string {
    const validReports = reports.filter(r => !r.daily_late);
    const invalidReports = reports.filter(r => r.daily_late);
    
    let dataString = `=== TH·ªêNG K√ä T·ªîNG QUAN ===\n`;
    dataString += `T·ªïng s·ªë b√°o c√°o: ${reports.length}\n`;
    dataString += `B√°o c√°o h·ª£p l·ªá: ${validReports.length}\n`;
    dataString += `B√°o c√°o kh√¥ng h·ª£p l·ªá: ${invalidReports.length}\n\n`;

    dataString += `=== CHI TI·∫æT B√ÅO C√ÅO H·ª¢P L·ªÜ ===\n`;
    validReports.forEach(report => {
      dataString += `--- ${report.display_name || report.member} ---\n`;
      dataString += `D·ª± √°n: ${report.project_label || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Task: ${report.task_label || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Lo·∫°i c√¥ng vi·ªác: ${report.work_type || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Ng√†y: ${report.date || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `C√¥ng vi·ªác h√¥m qua: ${report.yesterday || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
      dataString += `K·∫ø ho·∫°ch h√¥m nay: ${report.today || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
      dataString += `Blockers: ${report.block || 'Kh√¥ng c√≥'}\n`;
      dataString += `Th·ªùi gian l√†m vi·ªác: ${report.working_time || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Th·ªùi gian t·∫°o: ${report.create_time}\n\n`;
    });

    if (invalidReports.length > 0) {
      dataString += `=== B√ÅO C√ÅO KH√îNG H·ª¢P L·ªÜ ===\n`;
      invalidReports.forEach(report => {
        dataString += `--- ${report.display_name || report.member} ---\n`;
        dataString += `L√Ω do: B√°o c√°o ch·ª©a l·ªói ƒë·ªãnh d·∫°ng th·ªùi gian\n`;
        dataString += `Th·ªùi gian t·∫°o: ${report.create_time}\n`;
        dataString += `N·ªôi dung update: ${report.update_data}\n\n`;
      });
    }

    return dataString;
  }

  /**
   * Format the AI response to ensure consistent string output
   */
  private formatResponse(result: any): string {
    if (typeof result.content === 'string') {
      return result.content;
    } else if (result.content && typeof result.content === 'object' && 't' in result.content) {
      return (result.content as { t: string }).t;
    } else {
      return JSON.stringify(result.content);
    }
  }
}

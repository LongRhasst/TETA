import { ChatDeepSeek } from '@langchain/deepseek';
import { Inject, Injectable } from '@nestjs/common';
import { ChatPromptTemplate } from '@langchain/core/prompts';
import {
  SUMMARIZE_REPORT_SYSTEM_PROMPT,
  SUMMARIZE_REPORT_USER_PROMPT,
  PROJECT_REPORT_SYSTEM_PROMPT,
  PROJECT_REPORT_USER_PROMPT,
} from './prompts';
import { trainingExamples, promptTrainingExamples } from './trainning/training-IO';

@Injectable()
export class AiService {
  constructor(@Inject('AI') private readonly ai: ChatDeepSeek) {}

  async generateSummarizeReport(input: string): Promise<string> {
    const prompt = ChatPromptTemplate.fromMessages([
      ['system', SUMMARIZE_REPORT_SYSTEM_PROMPT],
      ['user', SUMMARIZE_REPORT_USER_PROMPT],
    ]);

    const chain = prompt.pipe(this.ai);
    const result = await chain.invoke({ input });

    return this.formatResponse(result);
  }

  /**
   * T·∫°o b√°o c√°o ƒë√°nh gi√° d·ª± √°n theo 12 ti√™u ch√≠ chu·∫©n
   */
  async generateProjectReport(dailyReports: any[]): Promise<string> {
    const inputData = this.prepareProjectReportData(dailyReports);
    
    const prompt = ChatPromptTemplate.fromMessages([
      ['system', PROJECT_REPORT_SYSTEM_PROMPT],
      ['user', PROJECT_REPORT_USER_PROMPT],
    ]);

    const chain = prompt.pipe(this.ai);
    const result = await chain.invoke({ input: inputData });

    return this.formatResponse(result);
  }

  /**
   * Chu·∫©n b·ªã d·ªØ li·ªáu cho b√°o c√°o ƒë√°nh gi√° d·ª± √°n 12 ti√™u ch√≠
   */
  private prepareProjectReportData(reports: any[]): string {
    const validReports = reports.filter(r => !r.daily_late);
    const invalidReports = reports.filter(r => r.daily_late);
    
    // Ph√¢n t√≠ch d·ªØ li·ªáu c∆° b·∫£n
    const analysis = this.analyzeWorkTrends(reports);
    
    // Ph√¢n t√≠ch blockers v√† issues
    const blockers = validReports
      .filter(r => r.block && r.block.trim() !== '')
      .map(r => ({ user: r.display_name || r.username, block: r.block }));
    
    // Ph√¢n t√≠ch task distribution
    const taskDistribution: Record<string, number> = {};
    validReports.forEach(report => {
      if (report.task_label) {
        taskDistribution[report.task_label] = (taskDistribution[report.task_label] || 0) + 1;
      }
    });

    // Ph√¢n t√≠ch progress theo ng√†y
    const dailyProgress: Record<string, any[]> = {};
    validReports.forEach(report => {
      const dateKey = report.date ? new Date(report.date).toLocaleDateString() : 'Kh√¥ng x√°c ƒë·ªãnh';
      if (!dailyProgress[dateKey]) dailyProgress[dateKey] = [];
      dailyProgress[dateKey].push({
        user: report.display_name || report.username,
        yesterday: report.yesterday,
        today: report.today,
        project: report.project_label
      });
    });

    let dataString = `=== TH√îNG TIN D·ª∞ √ÅN ===\n`;
    dataString += `Th·ªùi gian: ${new Date().toLocaleDateString()} - Tu·∫ßn hi·ªán t·∫°i\n`;
    dataString += `D·ª± √°n ch√≠nh: ${analysis.topProjects[0] || 'ƒêa d·ª± √°n'}\n`;
    dataString += `S·ªë th√†nh vi√™n: ${new Set(validReports.map(r => r.username)).size} ng∆∞·ªùi active\n`;
    dataString += `T·ªïng b√°o c√°o: ${reports.length} (${validReports.length} h·ª£p l·ªá, ${invalidReports.length} kh√¥ng h·ª£p l·ªá)\n\n`;

    dataString += `=== METRICS T·ªîNG QUAN ===\n`;
    dataString += `T·ªïng gi·ªù l√†m vi·ªác: ${analysis.totalHours} gi·ªù\n`;
    dataString += `Trung b√¨nh m·ªói ng∆∞·ªùi: ${analysis.averageHours.toFixed(1)} gi·ªù\n`;
    dataString += `T·ª∑ l·ªá b√°o c√°o h·ª£p l·ªá: ${analysis.validRate.toFixed(1)}%\n`;
    dataString += `S·ªë blockers hi·ªán t·∫°i: ${analysis.blockerCount}\n`;
    dataString += `Top d·ª± √°n: ${analysis.topProjects.join(', ')}\n\n`;

    dataString += `=== PH√ÇN T√çCH TASK DISTRIBUTION ===\n`;
    Object.entries(taskDistribution).forEach(([task, count]) => {
      dataString += `${task}: ${count} reports\n`;
    });
    dataString += '\n';

    dataString += `=== CHI TI·∫æT BLOCKERS ===\n`;
    blockers.forEach(({ user, block }) => {
      dataString += `${user}: ${block}\n`;
    });
    dataString += '\n';

    dataString += `=== TI·∫æN ƒê·ªò THEO NG√ÄY ===\n`;
    Object.entries(dailyProgress).forEach(([date, activities]) => {
      dataString += `--- ${date} ---\n`;
      activities.forEach(activity => {
        dataString += `${activity.user} (${activity.project}):\n`;
        dataString += `  Completed: ${activity.yesterday || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
        dataString += `  Planning: ${activity.today || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
      });
      dataString += '\n';
    });

    dataString += `=== CHI TI·∫æT TH√ÄNH VI√äN ===\n`;
    const userStats: Record<string, any> = {};
    validReports.forEach(report => {
      const userId = report.username;
      if (!userStats[userId]) {
        userStats[userId] = {
          name: report.display_name || report.username,
          totalHours: 0,
          reportCount: 0,
          projects: new Set(),
          tasks: new Set(),
          blockers: []
        };
      }
      
      userStats[userId].totalHours += this.parseWorkingTime(report.working_time || '0');
      userStats[userId].reportCount++;
      if (report.project_label) userStats[userId].projects.add(report.project_label);
      if (report.task_label) userStats[userId].tasks.add(report.task_label);
      if (report.block && report.block.trim() !== '') {
        userStats[userId].blockers.push(report.block);
      }
    });

    Object.values(userStats).forEach((user: any) => {
      dataString += `--- ${user.name} ---\n`;
      dataString += `T·ªïng gi·ªù: ${user.totalHours} gi·ªù\n`;
      dataString += `S·ªë b√°o c√°o: ${user.reportCount}\n`;
      dataString += `D·ª± √°n tham gia: ${Array.from(user.projects).join(', ')}\n`;
      dataString += `Lo·∫°i task: ${Array.from(user.tasks).join(', ')}\n`;
      dataString += `Blockers: ${user.blockers.length > 0 ? user.blockers.join('; ') : 'Kh√¥ng c√≥'}\n`;
      dataString += '\n';
    });

    return dataString;
  }

  /**
   * T·ªïng h·ª£p b√°o c√°o team t·ª´ t·∫•t c·∫£ daily reports
   * Format output d·∫°ng form message thay v√¨ JSON
   */
  async generateTeamSummaryReport(dailyReports: any[]): Promise<string> {
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng structured format
    const inputData = this.prepareReportData(dailyReports);
    
    const prompt = ChatPromptTemplate.fromMessages([
      ['system', SUMMARIZE_REPORT_SYSTEM_PROMPT],
      ['user', SUMMARIZE_REPORT_USER_PROMPT],
    ]);

    const chain = prompt.pipe(this.ai);
    const result = await chain.invoke({ input: inputData });

    return this.formatResponse(result);
  }

  /**
   * Chu·∫©n b·ªã d·ªØ li·ªáu daily reports th√†nh format ph√π h·ª£p cho AI
   */
  private prepareReportData(reports: any[]): string {
    const validReports = reports.filter(r => !r.daily_late);
    const invalidReports = reports.filter(r => r.daily_late);
    
    let dataString = `=== TH·ªêNG K√ä T·ªîNG QUAN ===\n`;
    dataString += `T·ªïng s·ªë b√°o c√°o: ${reports.length}\n`;
    dataString += `B√°o c√°o h·ª£p l·ªá: ${validReports.length}\n`;
    dataString += `B√°o c√°o kh√¥ng h·ª£p l·ªá: ${invalidReports.length}\n\n`;

    dataString += `=== CHI TI·∫æT B√ÅO C√ÅO H·ª¢P L·ªÜ ===\n`;
    validReports.forEach(report => {
      dataString += `--- ${report.display_name || report.username} ---\n`;
      dataString += `D·ª± √°n: ${report.project_label || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Task: ${report.task_label || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Lo·∫°i c√¥ng vi·ªác: ${report.work_type || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Ng√†y: ${report.date || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `C√¥ng vi·ªác h√¥m qua: ${report.yesterday || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
      dataString += `K·∫ø ho·∫°ch h√¥m nay: ${report.today || 'Kh√¥ng c√≥ th√¥ng tin'}\n`;
      dataString += `Blockers: ${report.block || 'Kh√¥ng c√≥'}\n`;
      dataString += `Th·ªùi gian l√†m vi·ªác: ${report.working_time || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
      dataString += `Th·ªùi gian t·∫°o: ${report.create_time}\n\n`;
    });

    if (invalidReports.length > 0) {
      dataString += `=== B√ÅO C√ÅO KH√îNG H·ª¢P L·ªÜ ===\n`;
      invalidReports.forEach(report => {
        dataString += `--- ${report.display_name || report.username} ---\n`;
        dataString += `L√Ω do: B√°o c√°o ch·ª©a l·ªói ƒë·ªãnh d·∫°ng th·ªùi gian\n`;
        dataString += `Th·ªùi gian t·∫°o: ${report.create_time}\n`;
        dataString += `N·ªôi dung update: ${report.update_data}\n\n`;
      });
    }

    return dataString;
  }

  /**
   * Get training examples for improving AI responses
   */
  getTrainingExamples() {
    return trainingExamples;
  }

  /**
   * Get prompt training guidelines
   */
  getPromptTrainingGuidelines() {
    return promptTrainingExamples;
  }

  /**
   * Generate report with training context for better output
   * S·ª≠ d·ª•ng training examples ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng output
   */
  async generateSummarizeReportWithTraining(input: string): Promise<string> {
    // Enhanced prompt v·ªõi training context
    const enhancedSystemPrompt = `${SUMMARIZE_REPORT_SYSTEM_PROMPT}

=== V√ç D·ª§ OUTPUT CHU·∫®N ===
${trainingExamples.weeklyReportTraining.expectedOutput.substring(0, 800)}...

=== QUY T·∫ÆC B·ªî SUNG ===
1. Lu√¥n s·ª≠ d·ª•ng ti·∫øng Vi·ªát trong b√°o c√°o
2. Format d·∫°ng form message, KH√îNG bao gi·ªù tr·∫£ v·ªÅ JSON raw
3. Bao g·ªìm emoji ƒë·ªÉ d·ªÖ ƒë·ªçc: üìä üìà üéØ ‚úÖ ‚ö†Ô∏è üë• üöÄ
4. ƒê∆∞a ra metrics c·ª• th·ªÉ v√† ph·∫ßn trƒÉm
5. Ph√¢n t√≠ch insights thay v√¨ ch·ªâ t√≥m t·∫Øt data
6. K·∫øt th√∫c b·∫±ng action items c·ª• th·ªÉ
7. X·ª≠ l√Ω ri√™ng c√°c b√°o c√°o kh√¥ng h·ª£p l·ªá (daily_late = true)`;

    const prompt = ChatPromptTemplate.fromMessages([
      ['system', enhancedSystemPrompt],
      ['user', SUMMARIZE_REPORT_USER_PROMPT],
    ]);

    const chain = prompt.pipe(this.ai);
    const result = await chain.invoke({ input });

    return this.formatResponse(result);
  }

  /**
   * Format the AI response to ensure consistent string output
   */
  private formatResponse(result: any): string {
    if (typeof result.content === 'string') {
      return result.content;
    } else if (result.content && typeof result.content === 'object' && 't' in result.content) {
      return (result.content as { t: string }).t;
    } else {
      return JSON.stringify(result.content);
    }
  }

  /**
   * T·∫°o b√°o c√°o t·ªïng h·ª£p team v·ªõi ƒë√°nh gi√° hi·ªáu su·∫•t
   * ƒê·∫ßu v√†o c√≥ th·ªÉ l√† array reports ho·∫∑c string data
   */
  async generateComprehensiveTeamReport(data: any[] | string): Promise<string> {
    let inputData: string;
    
    if (Array.isArray(data)) {
      inputData = this.prepareReportData(data);
    } else {
      inputData = data;
    }

    return await this.generateSummarizeReportWithTraining(inputData);
  }

  /**
   * Ph√¢n t√≠ch xu h∆∞·ªõng l√†m vi·ªác t·ª´ d·ªØ li·ªáu reports
   */
  private analyzeWorkTrends(reports: any[]): {
    totalHours: number;
    averageHours: number;
    validRate: number;
    blockerCount: number;
    topProjects: string[];
  } {
    const validReports = reports.filter(r => !r.daily_late);
    
    const totalHours = validReports.reduce((sum, report) => {
      const hours = this.parseWorkingTime(report.working_time);
      return sum + hours;
    }, 0);

    const averageHours = validReports.length > 0 ? totalHours / validReports.length : 0;
    const validRate = reports.length > 0 ? (validReports.length / reports.length) * 100 : 0;
    
    const blockerCount = validReports.filter(r => r.block && r.block.trim() !== '').length;
    
    const projectCounts: Record<string, number> = {};
    validReports.forEach(report => {
      if (report.project_label) {
        projectCounts[report.project_label] = (projectCounts[report.project_label] || 0) + 1;
      }
    });
    
    const topProjects = Object.entries(projectCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([project]) => project);

    return {
      totalHours,
      averageHours,
      validRate,
      blockerCount,
      topProjects
    };
  }

  /**
   * Parse working time string to hours
   */
  private parseWorkingTime(timeStr: string): number {
    if (!timeStr) return 0;
    
    const hourMatch = timeStr.match(/(\d+(?:\.\d+)?)\s*(?:h|hour|gi·ªù)/i);
    if (hourMatch) return parseFloat(hourMatch[1]);
    
    const minMatch = timeStr.match(/(\d+)\s*(?:min|minute|ph√∫t)/i);
    if (minMatch) return parseFloat(minMatch[1]) / 60;
    
    return 0;
  }
}

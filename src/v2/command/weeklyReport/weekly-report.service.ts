import { Injectable } from '@nestjs/common';
import { KomuDatabaseService } from '../../listen/services/komu-database.service';
import { SummarizeReportService } from '../../ai/services/summarize-report.service';
import { ProjectReportService } from '../../ai/services/project-report.service';
import { TimeControlService } from './timeControl/time-control.service';
import { generateChannelMessageContent } from '../message';
import { COMMAND_CODES } from '../../constants/command-codes';
import { report } from 'process';

@Injectable()
export class WeeklyReportService {
  constructor(
    private readonly databaseService: KomuDatabaseService,
    private readonly summarizeService: SummarizeReportService,
    private readonly projectService: ProjectReportService,
    private readonly timeControlService: TimeControlService,
  ) {}

  /**
   * X·ª≠ l√Ω command *weeklyUserReport - B√°o c√°o t·ªïng h·ª£p team (s·ª≠ d·ª•ng summarize prompt)
   */
  async handleWeeklyUserReport(channelId: string, time: number) {
    try {
      // T·∫°o time filter v√† time description
      const timeFilter = this.timeControlService.createPrismaTimeFilter(time);
      const timeDescription = this.timeControlService.getTimeDescription(time);
      const timeRange = this.timeControlService.calculateTimeRange(time);
      const dateRangeStr = this.timeControlService.formatDateRange(timeRange.startDate, timeRange.endDate);
      
      // Th√¥ng b√°o b√°o c√°o ƒëang ƒë∆∞·ª£c t·∫°o
      console.log(`B√°o c√°o t·ªïng h·ª£p team ƒëang ƒë∆∞·ª£c t·∫°o cho ${dateRangeStr}...`);
      
      // L·∫•y reports theo channel v√† time filter
      const reports = await this.databaseService.getReportsByChannelAndTime(channelId, timeFilter);
      
      if (reports.length === 0) {
        return generateChannelMessageContent({
          message: `\`\`\`\nKh√¥ng c√≥ d·ªØ li·ªáu trong ${timeDescription} ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p (${dateRangeStr}).\n\`\`\``,
          blockMessage: true,
        });
      }

      // S·ª≠ d·ª•ng summarize service ƒë·ªÉ t·∫°o b√°o c√°o
      const reportContent = await this.summarizeService.generateTeamSummaryReport(reports);

      return generateChannelMessageContent({
        message: `\nB√ÅO C√ÅO T·ªîNG H·ª¢P TEAM - ${timeDescription.toUpperCase()}\nTh·ªùi gian: ${dateRangeStr}\n\n${reportContent}\n`,
        blockMessage: true,
      });
    } catch (error) {
      console.error('Error generating weekly user report:', error);
      return generateChannelMessageContent({
        message: '```\nC√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o t·ªïng h·ª£p team.\n```',
        blockMessage: true,
      });
    }
  }

  /**
   * X·ª≠ l√Ω command *weeklyReport - B√°o c√°o ƒë√°nh gi√° d·ª± √°n (s·ª≠ d·ª•ng project prompt v·ªõi 12 ti√™u ch√≠)
   */
  async handleWeeklyReport(channelId: string, time: number) {
    try {
      // T·∫°o time filter v√† time description
      const timeFilter = this.timeControlService.createPrismaTimeFilter(time);
      const timeDescription = this.timeControlService.getTimeDescription(time);
      const timeRange = this.timeControlService.calculateTimeRange(time);
      const dateRangeStr = this.timeControlService.formatDateRange(timeRange.startDate, timeRange.endDate);
      
      // Th√¥ng b√°o b√°o c√°o ƒëang ƒë∆∞·ª£c t·∫°o
      console.log(`B√°o c√°o ƒë√°nh gi√° d·ª± √°n ƒëang ƒë∆∞·ª£c t·∫°o cho ${dateRangeStr}...`);
      
      // Ki·ªÉm tra xem b√°o c√°o ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
      const existingReport = await this.databaseService.checkReportExists(
        COMMAND_CODES.WEEKLY_REPORT,
        timeRange.startDate,
        timeRange.endDate
      );

      if (existingReport) {
        console.log(`üìÑ T√¨m th·∫•y b√°o c√°o c√≥ s·∫µn (ID: ${existingReport.id}) t·∫°o l√∫c ${existingReport.create_time}`);
        
        // L·∫•y b√°o c√°o ƒë√£ c√≥ v√† format l·∫°i
        const reportContent = await this.databaseService.getExistingReportAsJson(existingReport.id);
        
        return generateChannelMessageContent({
          message: `\nB√ÅO C√ÅO ƒê√ÅNH GI√Å D·ª∞ √ÅN - 12 TI√äU CH√ç (ƒê√£ t·∫°o)\nTh·ªùi gian: ${dateRangeStr}\nT·∫°o l√∫c: ${new Date(existingReport.create_time).toLocaleString('vi-VN')}\n\n${reportContent}\n`,
          blockMessage: true,
        });
      }

      // N·∫øu ch∆∞a c√≥ b√°o c√°o, l·∫•y d·ªØ li·ªáu v√† t·∫°o m·ªõi
      console.log(`üîÑ Kh√¥ng t√¨m th·∫•y b√°o c√°o c√≥ s·∫µn, ƒëang t·∫°o b√°o c√°o m·ªõi...`);
      
      // L·∫•y reports theo channel v√† time filter
      const reports = await this.databaseService.getReportsByChannelAndTime(channelId, timeFilter);
      
      if (reports.length === 0) {
        return generateChannelMessageContent({
          message: `\`\`\`\nKh√¥ng c√≥ d·ªØ li·ªáu trong ${timeDescription} ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p (${dateRangeStr}).\n\`\`\``,
          blockMessage: true,
        });
      }

      // T·∫°o b√°o c√°o m·ªõi b·∫±ng AI
      const reportContent = await this.projectService.generateProjectReport(reports);

      // L∆∞u b√°o c√°o v√†o database
      await this.databaseService.saveProjectReport(reportContent, COMMAND_CODES.WEEKLY_REPORT, timeRange.endDate);

      console.log(`‚úÖ ƒê√£ t·∫°o v√† l∆∞u b√°o c√°o m·ªõi cho ${dateRangeStr}`);

      return generateChannelMessageContent({
        message: `\nB√ÅO C√ÅO ƒê√ÅNH GI√Å D·ª∞ √ÅN - 12 TI√äU CH√ç (M·ªõi t·∫°o)\nTh·ªùi gian: ${dateRangeStr}\n\n${reportContent}\n`,
        blockMessage: true,
      });
    } catch (error) {
      console.error('Error generating weekly project report:', error);
      return generateChannelMessageContent({
        message: `\nC√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o ƒë√°nh gi√° d·ª± √°n.\n`,
        blockMessage: true,
      });
    }
  }

  /**
   * X·ª≠ l√Ω command *reportStats - Th·ªëng k√™ b√°o c√°o
   */
  async handleReportStats(channelId: string, time: number) {
    try {
      // T·∫°o time filter v√† time description
      const timeFilter = this.timeControlService.createPrismaTimeFilter(time);
      const timeDescription = this.timeControlService.getTimeDescription(time);
      const timeRange = this.timeControlService.calculateTimeRange(time);
      const dateRangeStr = this.timeControlService.formatDateRange(timeRange.startDate, timeRange.endDate);
      
      // Th√¥ng b√°o th·ªëng k√™ ƒëang ƒë∆∞·ª£c t·∫°o
      console.log(`Th·ªëng k√™ b√°o c√°o ƒëang ƒë∆∞·ª£c t·∫°o cho ${dateRangeStr}...`);
      
      // L·∫•y reports theo channel v√† time filter
      const reports = await this.databaseService.getReportsByChannelAndTime(channelId, timeFilter);
      
      if (reports.length === 0) {
        return generateChannelMessageContent({
          message: `\`\`\`\nKh√¥ng c√≥ d·ªØ li·ªáu trong ${timeDescription} ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p (${dateRangeStr}).\n\`\`\``,
          blockMessage: true,
        });
      }
      
      const validReports = reports.filter(r => !r.daily_late);
      const invalidReports = reports.filter(r => r.daily_late);
      
      const uniqueMembers = new Set(validReports.map(r => r.member)).size;
      const totalHours = validReports.reduce((sum, report) => {
        const hours = this.parseWorkingTime(report.working_time || '0');
        return sum + hours;
      }, 0);

      const projectStats: Record<string, number> = {};
      validReports.forEach(report => {
        if (report.project_label) {
          projectStats[report.project_label] = (projectStats[report.project_label] || 0) + 1;
        }
      });

      const topProjects = Object.entries(projectStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);

      const projectEntries = Object.entries(projectStats);

      let statsMessage = `TH·ªêNG K√ä B√ÅO C√ÅO - ${timeDescription.toUpperCase()}\nTh·ªùi gian: ${dateRangeStr}\n\n`;
      statsMessage += `T·ªïng quan:\n`;
      statsMessage += `‚Ä¢ S·ªë th√†nh vi√™n active: ${uniqueMembers}\n`;
      statsMessage += `‚Ä¢ T·ªïng b√°o c√°o: ${reports.length}\n`;
      statsMessage += `‚Ä¢ B√°o c√°o h·ª£p l·ªá: ${validReports.length} (${((validReports.length/reports.length)*100).toFixed(1)}%)\n`;
      statsMessage += `‚Ä¢ B√°o c√°o kh√¥ng h·ª£p l·ªá: ${invalidReports.length}\n`;
      statsMessage += `‚Ä¢ T·ªïng gi·ªù l√†m vi·ªác: ${totalHours} gi·ªù\n\n`;
      
      if (projectEntries.length > 0) {
        statsMessage += `‚Ä¢ D·ª± √°n: ${projectEntries[0][0]} : ${projectEntries[0][1]} b√°o c√°o\n\n`;
      }

      return generateChannelMessageContent({
        message: `\n${statsMessage}\n`,
        blockMessage: true,
      });
    } catch (error) {
      console.error('Error generating report stats:', error);
      return generateChannelMessageContent({
        message: '```\nC√≥ l·ªói x·∫£y ra khi t·∫°o th·ªëng k√™ b√°o c√°o.\n```',
        blockMessage: true,
      });
    }
  }

  /**
   * Parse working time string to hours
   */
  private parseWorkingTime(timeStr: string): number {
    if (!timeStr) return 0;
    
    const hourMatch = timeStr.match(/(\d+(?:\.\d+)?)\s*(?:h|hour|gi·ªù)/i);
    if (hourMatch) return parseFloat(hourMatch[1]);
    
    const minMatch = timeStr.match(/(\d+)\s*(?:min|minute|ph√∫t)/i);
    if (minMatch) return parseFloat(minMatch[1]) / 60;
    
    const numericMatch = timeStr.match(/^(\d+(?:\.\d+)?)$/);
    if (numericMatch) return parseFloat(numericMatch[1]);
    
    return 0;
  }
}

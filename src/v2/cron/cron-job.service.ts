import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { KomuDatabaseService } from '../listen/services/komu-database.service';
import { ProjectReportService } from '../ai/services/project-report.service';
import { TimeControlService } from '../command/weeklyReport/timeControl/time-control.service';
import { ConfigService } from '@nestjs/config';
import { COMMAND_CODES } from '../constants/command-codes';

@Injectable()
export class CronJobService {
  private readonly logger = new Logger(CronJobService.name);
  
  constructor(
    private readonly databaseService: KomuDatabaseService,
    private readonly projectReportService: ProjectReportService,
    private readonly timeControlService: TimeControlService,
    private readonly configService: ConfigService,
  ) {}

  /**
   * Cronjob t·ª± ƒë·ªông t·∫°o b√°o c√°o tu·∫ßn v√†o 0h th·ª© 2 h√†ng tu·∫ßn
   * L·∫•y d·ªØ li·ªáu t·ª´ database, t·∫°o b√°o c√°o v√† l∆∞u v√†o report_logs
   */
  @Cron('0 0 * * 1', {
    name: 'weekly-report-auto',
    timeZone: 'Asia/Ho_Chi_Minh',
  })
  async handleWeeklyReportCron() {
    this.logger.log('üïê B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông t·∫°o b√°o c√°o tu·∫ßn...');
    
    try {
      // L·∫•y channel ID m·∫∑c ƒë·ªãnh t·ª´ config
      const defaultChannelId = this.configService.get<string>('DEFAULT_REPORT_CHANNEL_ID');
      
      if (!defaultChannelId) {
        this.logger.warn('‚ö†Ô∏è  Kh√¥ng c√≥ DEFAULT_REPORT_CHANNEL_ID trong config, s·ª≠ d·ª•ng t·∫•t c·∫£ channels');
      }

      // time = 1 means "tu·∫ßn tr∆∞·ªõc" (tu·∫ßn v·ª´a k·∫øt th√∫c)
      const time = 1; 
      
      // T·∫°o time filter v√† time range
      const timeFilter = this.timeControlService.createPrismaTimeFilter(time);
      const timeRange = this.timeControlService.calculateTimeRange(time);
      const dateRangeStr = this.timeControlService.formatDateRange(timeRange.startDate, timeRange.endDate);
      
      this.logger.log(`üìä ƒêang t·∫°o b√°o c√°o cho tu·∫ßn: ${dateRangeStr}`);

      // Ki·ªÉm tra xem b√°o c√°o ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingReport = await this.databaseService.checkReportExists(
        COMMAND_CODES.WEEKLY_REPORT,
        timeRange.startDate,
        timeRange.endDate
      );

      if (existingReport) {
        this.logger.log(`üìÑ B√°o c√°o cho tu·∫ßn ${dateRangeStr} ƒë√£ t·ªìn t·∫°i (ID: ${existingReport.id})`);
        return;
      }

      // L·∫•y d·ªØ li·ªáu reports theo time filter
      let reports;
      if (defaultChannelId) {
        reports = await this.databaseService.getReportsByChannelAndTime(defaultChannelId, timeFilter);
      } else {
        // L·∫•y t·∫•t c·∫£ reports n·∫øu kh√¥ng c√≥ channel c·ª• th·ªÉ
        reports = await this.databaseService.getAllReportsWithTimeFilter(timeFilter);
      }
      
      if (reports.length === 0) {
        this.logger.warn(`‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu cho tu·∫ßn ${dateRangeStr}`);
        return;
      }

      this.logger.log(`üìã T√¨m th·∫•y ${reports.length} b√°o c√°o ƒë·ªÉ ph√¢n t√≠ch`);

      // T·∫°o b√°o c√°o b·∫±ng AI
      const reportContent = await this.projectReportService.generateProjectReport(reports);
      
      // L∆∞u b√°o c√°o v√†o database
      await this.databaseService.saveProjectReport(reportContent, COMMAND_CODES.WEEKLY_REPORT);
      
      this.logger.log(`‚úÖ ƒê√£ t·∫°o v√† l∆∞u b√°o c√°o tu·∫ßn th√†nh c√¥ng cho ${dateRangeStr}`);
      
    } catch (error) {
      this.logger.error('‚ùå L·ªói khi t·ª± ƒë·ªông t·∫°o b√°o c√°o tu·∫ßn:', error);
    }
  }

  @Cron('0 1 * * 0', {
    name: 'cleanup-old-data',
    timeZone: 'Asia/Ho_Chi_Minh',
  })
  async handleCleanupCron() {
    this.logger.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ªØ li·ªáu c≈©...');
    
    try {
      // X√≥a daily reports c≈© h∆°n 3 th√°ng
      const threeMonthsAgo = new Date();
      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
      
      const deletedCount = await this.databaseService.cleanupOldReports(threeMonthsAgo);
      
      this.logger.log(`‚úÖ ƒê√£ x√≥a ${deletedCount} b√°o c√°o c≈©`);
      
    } catch (error) {
      this.logger.error('‚ùå L·ªói khi d·ªçn d·∫πp d·ªØ li·ªáu:', error);
    }
  }
}
